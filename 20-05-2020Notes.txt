	             Templates in OOP
- Template comprises of sample design with sample data, which you can customize according to your requirements.
- A dev eloper need to design templates for client so that he can implement according to his reqirements.
- Templates are mostly used for "Rollouts".
	a) End to End
	b) Upgrade
	c) Rollout
	d) Support
- What is a template in Software Development and How Templates are designed?
- Abstract Class
- Abstract class is a class  that comprises of functionalities both implemented and not-implemented i.e to be implemented.
- Technically a class should have all members functinality implemented.
- If any functionality is not-implemented then it should be designed as "Abstract Class".
- Abstract classes are defined by using "abstract" keyword.
- Abstract class can contain both incomplete and complete methods.
- The incomplete methods in abstract class must be marked as "abstract".
- You can't create an object for Abstract class as it is an incomplete class i.e it is having non-implemented methods.
- You have to "implement" an abstract class and define all in-complete functionality.
- You can also "extend" an abstract class where you can define the extended functionalities.

Ex:
abstract class Product {
    public Name:string;
    public Price:number;
    public Qty:number;
    public abstract Total():number;
    public PrintDetails():void {
        console.log(`Name=${this.Name}\nPrice=${this.Price}\nQty=${this.Qty}\nTotal=${this.Total()}`);
    }
}
class Mobile extends Product {
    public Name:string = "Samsung Mobile";
    public Price:number = 34000.44;
    public Qty:number = 2;
    public Total():number {
       return this.Qty * this.Price;
    }
    public PrintDetails():void {
        super.PrintDetails();
    }
}
let moblie = new Mobile();
moblie.PrintDetails();

What is Abstraction in OOP?
- When you are using abstract members in a class the implementation details are hidden from the user, only functionality will be provided through an implemented class. 
- The mechanism of hiding the members in a class and providing implementation for those members is known as "Abstraction".

What is difference between Template and Contract?
- Contract is Interface
- Contract can contain only declaration not definition.
- You can define access specified for contract members.

- Template is Abstract class
- Template can contain both declaration and definition.
- Template contains bot empty method without definition and method with definition.
- You can define access specifiers.

	 Modules, Namespaces








